<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\I2C_TwoBoard_CommunicationSlave_IT_Init.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\I2C_TwoBoard_CommunicationSlave_IT_Init.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6190004: Last Updated: Sun Jul 23 09:31:09 2023
<BR><P>
<H3>Maximum Stack Usage =        528 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; $Super$$main &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[8]">EXTI0_1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">EXTI0_1_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[b]">ADC_COMP_IRQHandler</a> from py32f0xx_it.o(.text.ADC_COMP_IRQHandler) referenced from startup_py32f002xx.o(RESET)
 <LI><a href="#[8]">EXTI0_1_IRQHandler</a> from startup_py32f002xx.o(.text) referenced from startup_py32f002xx.o(RESET)
 <LI><a href="#[9]">EXTI2_3_IRQHandler</a> from startup_py32f002xx.o(.text) referenced from startup_py32f002xx.o(RESET)
 <LI><a href="#[a]">EXTI4_15_IRQHandler</a> from startup_py32f002xx.o(.text) referenced from startup_py32f002xx.o(RESET)
 <LI><a href="#[6]">FLASH_IRQHandler</a> from startup_py32f002xx.o(.text) referenced from startup_py32f002xx.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from py32f0xx_it.o(.text.HardFault_Handler) referenced from startup_py32f002xx.o(RESET)
 <LI><a href="#[10]">I2C1_IRQHandler</a> from py32f0xx_it.o(.text.I2C1_IRQHandler) referenced from startup_py32f002xx.o(RESET)
 <LI><a href="#[e]">LPTIM1_IRQHandler</a> from startup_py32f002xx.o(.text) referenced from startup_py32f002xx.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from py32f0xx_it.o(.text.NMI_Handler) referenced from startup_py32f002xx.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from py32f0xx_it.o(.text.PendSV_Handler) referenced from startup_py32f002xx.o(RESET)
 <LI><a href="#[7]">RCC_IRQHandler</a> from startup_py32f002xx.o(.text) referenced from startup_py32f002xx.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_py32f002xx.o(.text) referenced from startup_py32f002xx.o(RESET)
 <LI><a href="#[11]">SPI1_IRQHandler</a> from startup_py32f002xx.o(.text) referenced from startup_py32f002xx.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from py32f0xx_it.o(.text.SVC_Handler) referenced from startup_py32f002xx.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from py32f0xx_it.o(.text.SysTick_Handler) referenced from startup_py32f002xx.o(RESET)
 <LI><a href="#[14]">SystemInit</a> from system_py32f0xx.o(.text.SystemInit) referenced from startup_py32f002xx.o(.text)
 <LI><a href="#[f]">TIM16_IRQHandler</a> from startup_py32f002xx.o(.text) referenced from startup_py32f002xx.o(RESET)
 <LI><a href="#[c]">TIM1_BRK_UP_TRG_COM_IRQHandler</a> from startup_py32f002xx.o(.text) referenced from startup_py32f002xx.o(RESET)
 <LI><a href="#[d]">TIM1_CC_IRQHandler</a> from startup_py32f002xx.o(.text) referenced from startup_py32f002xx.o(RESET)
 <LI><a href="#[12]">USART1_IRQHandler</a> from startup_py32f002xx.o(.text) referenced from startup_py32f002xx.o(RESET)
 <LI><a href="#[15]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_py32f002xx.o(.text)
 <LI><a href="#[13]">main</a> from system_py32f0xx.o(.text.$Sub$$main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[15]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f002xx.o(.text)
</UL>
<P><STRONG><a name="[82]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[16]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1d]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[83]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[84]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[85]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[86]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[87]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_py32f002xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f002xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>EXTI0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f002xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f002xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>EXTI2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f002xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f002xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>EXTI4_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f002xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f002xx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f002xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f002xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f002xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f002xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f002xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f002xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f002xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f002xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f002xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f002xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TIM1_BRK_UP_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f002xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f002xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f002xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f002xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_py32f002xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f002xx.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteBlocking
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteNoCheck
</UL>

<P><STRONG><a name="[88]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[89]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[19]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[8a]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[8b]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[18]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[7e]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
</UL>

<P><STRONG><a name="[8c]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1a]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[2e]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, uidiv_div0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_ConfigSpeed
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_InitTick
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintUnsigned
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_AdcGrpRegularUnitaryConvCompleteCallback
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_AdcConfig
</UL>

<P><STRONG><a name="[1c]"></a>__aeabi_uidivmod</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, uidiv_div0.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod$div0
</UL>

<P><STRONG><a name="[36]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, idiv_div0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_idiv
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintInt
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_AdcGrpRegularUnitaryConvCompleteCallback
</UL>

<P><STRONG><a name="[1b]"></a>__aeabi_idivmod$div0</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, idiv_div0.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[17]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[8d]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[13]"></a>main</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, system_py32f0xx.o(.text.$Sub$$main))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = main &rArr; $Super$$main &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[b]"></a>ADC_COMP_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, py32f0xx_it.o(.text.ADC_COMP_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ADC_COMP_IRQHandler &rArr; APP_AdcGrpRegularUnitaryConvCompleteCallback &rArr; __aeabi_idiv
</UL>
<BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_ClearFlag_EOC
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_IsActiveFlag_EOC
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_AdcGrpRegularUnitaryConvCompleteCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f002xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>APP_AdcGrpRegularUnitaryConvCompleteCallback</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, main.o(.text.APP_AdcGrpRegularUnitaryConvCompleteCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = APP_AdcGrpRegularUnitaryConvCompleteCallback &rArr; __aeabi_idiv
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idiv
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_ReadConversionData12
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_COMP_IRQHandler
</UL>

<P><STRONG><a name="[3d]"></a>APP_SlaveIRQCallback</STRONG> (Thumb, 520 bytes, Stack size 32 bytes, main.o(.text.APP_SlaveIRQCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = APP_SlaveIRQCallback &rArr; LL_I2C_TransmitData8
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_TransmitData8
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_IsEnabledIT_BUF
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_IsActiveFlag_TXE
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_IsActiveFlag_RXNE
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_ClearFlag_STOP
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_ReceiveData8
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_IsActiveFlag_BTF
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_DisableIT_ERR
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_DisableIT_BUF
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_DisableIT_EVT
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_IsActiveFlag_STOP
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_ClearFlag_ADDR
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_IsEnabledIT_EVT
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_IsActiveFlag_ADDR
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_EnableIT_ERR
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_EnableIT_BUF
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_EnableIT_EVT
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_AcknowledgeNextData
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_IRQHandler
</UL>

<P><STRONG><a name="[52]"></a>APP_SystemClockConfig</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, main.o(.text.APP_SystemClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = APP_SystemClockConfig &rArr; LL_Init1msTick &rArr; LL_InitTick &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetSystemCoreClock
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Init1msTick
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_SetAPB1Prescaler
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSysClkSource
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_SetSysClkSource
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_SetAHBPrescaler
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_HSI_IsReady
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_HSI_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, py32f0xx_it.o(.text.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f002xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>I2C1_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, py32f0xx_it.o(.text.I2C1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = I2C1_IRQHandler &rArr; APP_SlaveIRQCallback &rArr; LL_I2C_TransmitData8
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SlaveIRQCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f002xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>LL_ADC_Init</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, py32f0xx_ll_adc.o(.text.LL_ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LL_ADC_Init &rArr; LL_ADC_IsEnabled
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_IsEnabled
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_AdcConfig
</UL>

<P><STRONG><a name="[2c]"></a>LL_ADC_REG_Init</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, py32f0xx_ll_adc.o(.text.LL_ADC_REG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LL_ADC_REG_Init &rArr; LL_ADC_IsEnabled
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_IsEnabled
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_AdcConfig
</UL>

<P><STRONG><a name="[39]"></a>LL_GPIO_Init</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, py32f0xx_ll_gpio.o(.text.LL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LL_GPIO_Init &rArr; LL_GPIO_SetPinOutputType
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinOutputType
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetAFPin_8_15
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetAFPin_0_7
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinPull
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinSpeed
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinMode
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_ConfigI2cSlave
</UL>

<P><STRONG><a name="[3c]"></a>LL_I2C_Init</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, py32f0xx_ll_i2c.o(.text.LL_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LL_I2C_Init &rArr; LL_I2C_ConfigSpeed &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSystemClocksFreq
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_AcknowledgeNextData
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_Enable
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_SetOwnAddress1
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_ConfigSpeed
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_ConfigI2cSlave
</UL>

<P><STRONG><a name="[59]"></a>LL_Init1msTick</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, py32f0xx_ll_utils.o(.text.LL_Init1msTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LL_Init1msTick &rArr; LL_InitTick &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SystemClockConfig
</UL>

<P><STRONG><a name="[67]"></a>LL_RCC_GetSystemClocksFreq</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, py32f0xx_ll_rcc.o(.text.LL_RCC_GetSystemClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LL_RCC_GetSystemClocksFreq &rArr; RCC_GetSystemClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetPCLK1ClockFreq
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetHCLKClockFreq
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSystemClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_Init
</UL>

<P><STRONG><a name="[5a]"></a>LL_SetSystemCoreClock</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, py32f0xx_ll_utils.o(.text.LL_SetSystemCoreClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_SetSystemCoreClock
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SystemClockConfig
</UL>

<P><STRONG><a name="[26]"></a>LL_mDelay</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, py32f0xx_ll_utils.o(.text.LL_mDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LL_mDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_AdcEnable
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_AdcCalibrate
</UL>

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, py32f0xx_it.o(.text.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f002xx.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, py32f0xx_it.o(.text.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f002xx.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>RCC_GetHCLKClockFreq</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, py32f0xx_ll_rcc.o(.text.RCC_GetHCLKClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RCC_GetHCLKClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetAHBPrescaler
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSystemClocksFreq
</UL>

<P><STRONG><a name="[6e]"></a>RCC_GetPCLK1ClockFreq</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, py32f0xx_ll_rcc.o(.text.RCC_GetPCLK1ClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RCC_GetPCLK1ClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetAPB1Prescaler
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSystemClocksFreq
</UL>

<P><STRONG><a name="[6c]"></a>RCC_GetSystemClockFreq</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, py32f0xx_ll_rcc.o(.text.RCC_GetSystemClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCC_GetSystemClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetHSIDiv
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSysClkSource
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSystemClocksFreq
</UL>

<P><STRONG><a name="[73]"></a>SEGGER_RTT_Write</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, segger_rtt.o(.text.SEGGER_RTT_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_vprintf
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StoreChar
</UL>

<P><STRONG><a name="[75]"></a>SEGGER_RTT_WriteNoLock</STRONG> (Thumb, 172 bytes, Stack size 48 bytes, segger_rtt.o(.text.SEGGER_RTT_WriteNoLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteBlocking
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteNoCheck
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetAvailWriteSpace
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
</UL>

<P><STRONG><a name="[79]"></a>SEGGER_RTT_printf</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, segger_rtt_printf.o(.text.SEGGER_RTT_printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_vprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[7a]"></a>SEGGER_RTT_vprintf</STRONG> (Thumb, 830 bytes, Stack size 152 bytes, segger_rtt_printf.o(.text.SEGGER_RTT_vprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintUnsigned
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintInt
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StoreChar
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
</UL>

<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, py32f0xx_it.o(.text.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f002xx.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, py32f0xx_it.o(.text.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f002xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>SystemInit</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, system_py32f0xx.o(.text.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_py32f002xx.o(.text)
</UL>
<P><STRONG><a name="[1e]"></a>$Super$$main</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = $Super$$main &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SystemClockConfig
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SlaveTransmit_IT
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_StartConversion
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_ConfigI2cSlave
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_AdcEnable
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_AdcConfig
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_AdcCalibrate
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB1_GRP2_EnableClock
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8e]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[8f]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[90]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[5c]"></a>LL_ADC_Reset</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, main.o(.text.LL_ADC_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LL_ADC_Reset &rArr; LL_APB1_GRP2_ReleaseReset
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB1_GRP2_ReleaseReset
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB1_GRP2_ForceReset
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[80]"></a>LL_APB1_GRP2_EnableClock</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, main.o(.text.LL_APB1_GRP2_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_APB1_GRP2_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[22]"></a>APP_AdcCalibrate</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, main.o(.text.APP_AdcCalibrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = APP_AdcCalibrate &rArr; LL_mDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_mDelay
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_IsCalibrationOnGoing
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_StartCalibration
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_IsEnabled
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[27]"></a>APP_AdcConfig</STRONG> (Thumb, 172 bytes, Stack size 72 bytes, main.o(.text.APP_AdcConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = APP_AdcConfig &rArr; LL_ADC_REG_Init &rArr; LL_ADC_IsEnabled
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_Init
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_Init
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_EnableIT_EOC
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_SetSequencerChAdd
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_SetCommonPathInternalCh
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_SetSamplingTimeCommonChannels
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinMode
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IOP_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[33]"></a>APP_AdcEnable</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, main.o(.text.APP_AdcEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = APP_AdcEnable &rArr; LL_mDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_mDelay
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[37]"></a>APP_ConfigI2cSlave</STRONG> (Thumb, 152 bytes, Stack size 88 bytes, main.o(.text.APP_ConfigI2cSlave))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = APP_ConfigI2cSlave &rArr; LL_I2C_Init &rArr; LL_I2C_ConfigSpeed &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_Init
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB1_GRP1_ReleaseReset
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB1_GRP1_ForceReset
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB1_GRP1_EnableClock
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IOP_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[81]"></a>LL_ADC_REG_StartConversion</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, main.o(.text.LL_ADC_REG_StartConversion))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_ADC_REG_StartConversion
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[50]"></a>APP_SlaveTransmit_IT</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, main.o(.text.APP_SlaveTransmit_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = APP_SlaveTransmit_IT &rArr; LL_I2C_AcknowledgeNextData
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_EnableIT_ERR
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_EnableIT_BUF
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_EnableIT_EVT
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_AcknowledgeNextData
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_DisableBitPOS
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[53]"></a>LL_RCC_HSI_Enable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(.text.LL_RCC_HSI_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SystemClockConfig
</UL>

<P><STRONG><a name="[54]"></a>LL_RCC_HSI_IsReady</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(.text.LL_RCC_HSI_IsReady))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SystemClockConfig
</UL>

<P><STRONG><a name="[55]"></a>LL_RCC_SetAHBPrescaler</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, main.o(.text.LL_RCC_SetAHBPrescaler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_RCC_SetAHBPrescaler
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SystemClockConfig
</UL>

<P><STRONG><a name="[56]"></a>LL_RCC_SetSysClkSource</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, main.o(.text.LL_RCC_SetSysClkSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_RCC_SetSysClkSource
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SystemClockConfig
</UL>

<P><STRONG><a name="[57]"></a>LL_RCC_GetSysClkSource</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(.text.LL_RCC_GetSysClkSource))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SystemClockConfig
</UL>

<P><STRONG><a name="[58]"></a>LL_RCC_SetAPB1Prescaler</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, main.o(.text.LL_RCC_SetAPB1Prescaler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_RCC_SetAPB1Prescaler
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SystemClockConfig
</UL>

<P><STRONG><a name="[5d]"></a>LL_APB1_GRP2_ForceReset</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, main.o(.text.LL_APB1_GRP2_ForceReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_APB1_GRP2_ForceReset
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_Reset
</UL>

<P><STRONG><a name="[5e]"></a>LL_APB1_GRP2_ReleaseReset</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, main.o(.text.LL_APB1_GRP2_ReleaseReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_APB1_GRP2_ReleaseReset
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_Reset
</UL>

<P><STRONG><a name="[23]"></a>LL_ADC_IsEnabled</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, main.o(.text.LL_ADC_IsEnabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_ADC_IsEnabled
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_AdcCalibrate
</UL>

<P><STRONG><a name="[24]"></a>LL_ADC_StartCalibration</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, main.o(.text.LL_ADC_StartCalibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_ADC_StartCalibration
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_AdcCalibrate
</UL>

<P><STRONG><a name="[25]"></a>LL_ADC_IsCalibrationOnGoing</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, main.o(.text.LL_ADC_IsCalibrationOnGoing))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_ADC_IsCalibrationOnGoing
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_AdcCalibrate
</UL>

<P><STRONG><a name="[28]"></a>LL_IOP_GRP1_EnableClock</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, main.o(.text.LL_IOP_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_IOP_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_ConfigI2cSlave
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_AdcConfig
</UL>

<P><STRONG><a name="[29]"></a>LL_GPIO_SetPinMode</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, main.o(.text.LL_GPIO_SetPinMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LL_GPIO_SetPinMode
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_AdcConfig
</UL>

<P><STRONG><a name="[2b]"></a>LL_ADC_SetSamplingTimeCommonChannels</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, main.o(.text.LL_ADC_SetSamplingTimeCommonChannels))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_ADC_SetSamplingTimeCommonChannels
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_AdcConfig
</UL>

<P><STRONG><a name="[2d]"></a>LL_ADC_SetCommonPathInternalCh</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, main.o(.text.LL_ADC_SetCommonPathInternalCh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_ADC_SetCommonPathInternalCh
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_AdcConfig
</UL>

<P><STRONG><a name="[2f]"></a>LL_ADC_REG_SetSequencerChAdd</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, main.o(.text.LL_ADC_REG_SetSequencerChAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_ADC_REG_SetSequencerChAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_AdcConfig
</UL>

<P><STRONG><a name="[30]"></a>LL_ADC_EnableIT_EOC</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, main.o(.text.LL_ADC_EnableIT_EOC))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_ADC_EnableIT_EOC
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_AdcConfig
</UL>

<P><STRONG><a name="[31]"></a>NVIC_SetPriority</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, main.o(.text.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_ConfigI2cSlave
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_AdcConfig
</UL>

<P><STRONG><a name="[32]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, main.o(.text.NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_ConfigI2cSlave
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_AdcConfig
</UL>

<P><STRONG><a name="[34]"></a>LL_ADC_Enable</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, main.o(.text.LL_ADC_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_ADC_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_AdcEnable
</UL>

<P><STRONG><a name="[38]"></a>LL_APB1_GRP1_EnableClock</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, main.o(.text.LL_APB1_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_APB1_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_ConfigI2cSlave
</UL>

<P><STRONG><a name="[3a]"></a>LL_APB1_GRP1_ForceReset</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, main.o(.text.LL_APB1_GRP1_ForceReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_APB1_GRP1_ForceReset
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_ConfigI2cSlave
</UL>

<P><STRONG><a name="[3b]"></a>LL_APB1_GRP1_ReleaseReset</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, main.o(.text.LL_APB1_GRP1_ReleaseReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_APB1_GRP1_ReleaseReset
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_ConfigI2cSlave
</UL>

<P><STRONG><a name="[51]"></a>LL_I2C_DisableBitPOS</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, main.o(.text.LL_I2C_DisableBitPOS))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_I2C_DisableBitPOS
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SlaveTransmit_IT
</UL>

<P><STRONG><a name="[45]"></a>LL_I2C_AcknowledgeNextData</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, main.o(.text.LL_I2C_AcknowledgeNextData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_I2C_AcknowledgeNextData
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SlaveIRQCallback
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SlaveTransmit_IT
</UL>

<P><STRONG><a name="[4a]"></a>LL_I2C_EnableIT_EVT</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, main.o(.text.LL_I2C_EnableIT_EVT))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_I2C_EnableIT_EVT
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SlaveIRQCallback
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SlaveTransmit_IT
</UL>

<P><STRONG><a name="[4b]"></a>LL_I2C_EnableIT_BUF</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, main.o(.text.LL_I2C_EnableIT_BUF))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_I2C_EnableIT_BUF
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SlaveIRQCallback
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SlaveTransmit_IT
</UL>

<P><STRONG><a name="[4c]"></a>LL_I2C_EnableIT_ERR</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, main.o(.text.LL_I2C_EnableIT_ERR))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_I2C_EnableIT_ERR
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SlaveIRQCallback
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SlaveTransmit_IT
</UL>

<P><STRONG><a name="[35]"></a>LL_ADC_REG_ReadConversionData12</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, main.o(.text.LL_ADC_REG_ReadConversionData12))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_ADC_REG_ReadConversionData12
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_AdcGrpRegularUnitaryConvCompleteCallback
</UL>

<P><STRONG><a name="[3e]"></a>LL_I2C_IsActiveFlag_ADDR</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, main.o(.text.LL_I2C_IsActiveFlag_ADDR))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_I2C_IsActiveFlag_ADDR
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SlaveIRQCallback
</UL>

<P><STRONG><a name="[3f]"></a>LL_I2C_IsEnabledIT_EVT</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, main.o(.text.LL_I2C_IsEnabledIT_EVT))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_I2C_IsEnabledIT_EVT
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SlaveIRQCallback
</UL>

<P><STRONG><a name="[40]"></a>LL_I2C_ClearFlag_ADDR</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, main.o(.text.LL_I2C_ClearFlag_ADDR))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_I2C_ClearFlag_ADDR
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SlaveIRQCallback
</UL>

<P><STRONG><a name="[41]"></a>LL_I2C_IsActiveFlag_STOP</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, main.o(.text.LL_I2C_IsActiveFlag_STOP))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_I2C_IsActiveFlag_STOP
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SlaveIRQCallback
</UL>

<P><STRONG><a name="[42]"></a>LL_I2C_DisableIT_EVT</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, main.o(.text.LL_I2C_DisableIT_EVT))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_I2C_DisableIT_EVT
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SlaveIRQCallback
</UL>

<P><STRONG><a name="[43]"></a>LL_I2C_DisableIT_BUF</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, main.o(.text.LL_I2C_DisableIT_BUF))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_I2C_DisableIT_BUF
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SlaveIRQCallback
</UL>

<P><STRONG><a name="[44]"></a>LL_I2C_DisableIT_ERR</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, main.o(.text.LL_I2C_DisableIT_ERR))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_I2C_DisableIT_ERR
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SlaveIRQCallback
</UL>

<P><STRONG><a name="[46]"></a>LL_I2C_IsActiveFlag_BTF</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, main.o(.text.LL_I2C_IsActiveFlag_BTF))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_I2C_IsActiveFlag_BTF
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SlaveIRQCallback
</UL>

<P><STRONG><a name="[47]"></a>LL_I2C_ReceiveData8</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, main.o(.text.LL_I2C_ReceiveData8))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_I2C_ReceiveData8
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SlaveIRQCallback
</UL>

<P><STRONG><a name="[48]"></a>LL_I2C_ClearFlag_STOP</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, main.o(.text.LL_I2C_ClearFlag_STOP))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_I2C_ClearFlag_STOP
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SlaveIRQCallback
</UL>

<P><STRONG><a name="[49]"></a>LL_I2C_IsActiveFlag_RXNE</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, main.o(.text.LL_I2C_IsActiveFlag_RXNE))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_I2C_IsActiveFlag_RXNE
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SlaveIRQCallback
</UL>

<P><STRONG><a name="[4d]"></a>LL_I2C_IsActiveFlag_TXE</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, main.o(.text.LL_I2C_IsActiveFlag_TXE))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_I2C_IsActiveFlag_TXE
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SlaveIRQCallback
</UL>

<P><STRONG><a name="[4e]"></a>LL_I2C_IsEnabledIT_BUF</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, main.o(.text.LL_I2C_IsEnabledIT_BUF))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_I2C_IsEnabledIT_BUF
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SlaveIRQCallback
</UL>

<P><STRONG><a name="[4f]"></a>LL_I2C_TransmitData8</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, main.o(.text.LL_I2C_TransmitData8))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LL_I2C_TransmitData8
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SlaveIRQCallback
</UL>

<P><STRONG><a name="[1f]"></a>LL_ADC_IsActiveFlag_EOC</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, py32f0xx_it.o(.text.LL_ADC_IsActiveFlag_EOC))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_ADC_IsActiveFlag_EOC
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_COMP_IRQHandler
</UL>

<P><STRONG><a name="[20]"></a>LL_ADC_ClearFlag_EOC</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, py32f0xx_it.o(.text.LL_ADC_ClearFlag_EOC))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_ADC_ClearFlag_EOC
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_COMP_IRQHandler
</UL>

<P><STRONG><a name="[7b]"></a>_StoreChar</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, segger_rtt_printf.o(.text._StoreChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_vprintf
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintUnsigned
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintInt
</UL>

<P><STRONG><a name="[7c]"></a>_PrintInt</STRONG> (Thumb, 482 bytes, Stack size 80 bytes, segger_rtt_printf.o(.text._PrintInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idiv
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintUnsigned
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StoreChar
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_vprintf
</UL>

<P><STRONG><a name="[7d]"></a>_PrintUnsigned</STRONG> (Thumb, 452 bytes, Stack size 72 bytes, segger_rtt_printf.o(.text._PrintUnsigned))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StoreChar
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_vprintf
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintInt
</UL>

<P><STRONG><a name="[74]"></a>_DoInit</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, segger_rtt.o(.text._DoInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
</UL>

<P><STRONG><a name="[76]"></a>_GetAvailWriteSpace</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, segger_rtt.o(.text._GetAvailWriteSpace))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _GetAvailWriteSpace
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>

<P><STRONG><a name="[77]"></a>_WriteNoCheck</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, segger_rtt.o(.text._WriteNoCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>

<P><STRONG><a name="[78]"></a>_WriteBlocking</STRONG> (Thumb, 224 bytes, Stack size 48 bytes, segger_rtt.o(.text._WriteBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>

<P><STRONG><a name="[6b]"></a>LL_InitTick</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, py32f0xx_ll_utils.o(.text.LL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LL_InitTick &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Init1msTick
</UL>

<P><STRONG><a name="[5f]"></a>LL_GPIO_SetPinMode</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, py32f0xx_ll_gpio.o(.text.LL_GPIO_SetPinMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LL_GPIO_SetPinMode
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
</UL>

<P><STRONG><a name="[60]"></a>LL_GPIO_SetPinSpeed</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, py32f0xx_ll_gpio.o(.text.LL_GPIO_SetPinSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LL_GPIO_SetPinSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
</UL>

<P><STRONG><a name="[61]"></a>LL_GPIO_SetPinPull</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, py32f0xx_ll_gpio.o(.text.LL_GPIO_SetPinPull))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LL_GPIO_SetPinPull
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
</UL>

<P><STRONG><a name="[62]"></a>LL_GPIO_SetAFPin_0_7</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, py32f0xx_ll_gpio.o(.text.LL_GPIO_SetAFPin_0_7))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LL_GPIO_SetAFPin_0_7
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
</UL>

<P><STRONG><a name="[63]"></a>LL_GPIO_SetAFPin_8_15</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, py32f0xx_ll_gpio.o(.text.LL_GPIO_SetAFPin_8_15))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LL_GPIO_SetAFPin_8_15
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
</UL>

<P><STRONG><a name="[64]"></a>LL_GPIO_SetPinOutputType</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, py32f0xx_ll_gpio.o(.text.LL_GPIO_SetPinOutputType))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LL_GPIO_SetPinOutputType
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
</UL>

<P><STRONG><a name="[66]"></a>LL_I2C_Disable</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, py32f0xx_ll_i2c.o(.text.LL_I2C_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_I2C_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_Init
</UL>

<P><STRONG><a name="[65]"></a>LL_I2C_ConfigSpeed</STRONG> (Thumb, 300 bytes, Stack size 56 bytes, py32f0xx_ll_i2c.o(.text.LL_I2C_ConfigSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LL_I2C_ConfigSpeed &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_Init
</UL>

<P><STRONG><a name="[68]"></a>LL_I2C_SetOwnAddress1</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, py32f0xx_ll_i2c.o(.text.LL_I2C_SetOwnAddress1))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LL_I2C_SetOwnAddress1
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_Init
</UL>

<P><STRONG><a name="[69]"></a>LL_I2C_Enable</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, py32f0xx_ll_i2c.o(.text.LL_I2C_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_I2C_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_Init
</UL>

<P><STRONG><a name="[6a]"></a>LL_I2C_AcknowledgeNextData</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, py32f0xx_ll_i2c.o(.text.LL_I2C_AcknowledgeNextData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_I2C_AcknowledgeNextData
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_Init
</UL>

<P><STRONG><a name="[71]"></a>LL_RCC_GetSysClkSource</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, py32f0xx_ll_rcc.o(.text.LL_RCC_GetSysClkSource))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSystemClockFreq
</UL>

<P><STRONG><a name="[72]"></a>LL_RCC_GetHSIDiv</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, py32f0xx_ll_rcc.o(.text.LL_RCC_GetHSIDiv))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSystemClockFreq
</UL>

<P><STRONG><a name="[6f]"></a>LL_RCC_GetAHBPrescaler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, py32f0xx_ll_rcc.o(.text.LL_RCC_GetAHBPrescaler))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetHCLKClockFreq
</UL>

<P><STRONG><a name="[70]"></a>LL_RCC_GetAPB1Prescaler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, py32f0xx_ll_rcc.o(.text.LL_RCC_GetAPB1Prescaler))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetPCLK1ClockFreq
</UL>

<P><STRONG><a name="[5b]"></a>LL_ADC_IsEnabled</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, py32f0xx_ll_adc.o(.text.LL_ADC_IsEnabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_ADC_IsEnabled
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_Init
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_Init
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
